!function () { "use strict"; function t() { return "www.tradingview.com" === location.host || "wwwcn.tradingview.com" === location.host || "dwq4do82y8xi7.cloudfront.net" === location.host || "s.tradingview.com" === location.host || "i18n.tradingview.com" === location.host || "partial.tradingview.com" === location.host || location.host.match(/^[a-z]{2}\.tradingview\.com/) || location.host.match(/prod-[^.]+.tradingview.com/) ? "battle" : -1 !== location.href.indexOf("tradingview.com") ? "staging" : location.host.match(/webcharts/) ? "staging_local" : (location.host.match(/^localhost(:\d+)?$/), "local") } function e(t) { if (null === t) return null; var e = t.querySelector("#tradingview-copyright"), i = t.querySelector("#tradingview-quotes"), r = e || i; return r && t.removeChild(r), r } function i(t, e) { Object.keys(e).forEach(function (i) { t[i] = e[i] }) } function r() { var t = document.createElement("style"); return t.innerHTML = "\n\t.tradingview-widget-copyright {\n\t\tfont-size: 13px !important;\n\t\tline-height: 32px !important;\n\t\ttext-align: center !important;\n\t\tvertical-align: middle !important;\n\t\tfont-family: 'Trebuchet MS', Tahoma, Arial, sans-serif !important;\n\t\tcolor: #9db2bd !important;\n\t}\n\n\t.tradingview-widget-copyright .blue-text {\n\t\tcolor: #3bb3e4 !important;\n\t}\n\n\t.tradingview-widget-copyright a {\n\t\ttext-decoration: none !important;\n\t\tcolor: #9db2bd !important;\n\t}\n\n\t.tradingview-widget-copyright a:visited {\n\t\tcolor: #9db2bd !important;\n\t}\n\n\t.tradingview-widget-copyright a:hover .blue-text {\n\t\tcolor: #38acdb !important;\n\t}\n\n\t.tradingview-widget-copyright a:active .blue-text {\n\t\tcolor: #299dcd !important;\n\t}\n\n\t.tradingview-widget-copyright a:visited .blue-text {\n\t\tcolor: #3bb3e4 !important;\n\t}\n\t", t } var n = { events: "external-embedding/embed-widget-events.js", hotlists: "external-embedding/embed-widget-hotlists.js", marketoverview: "external-embedding/embed-widget-market-overview.js", tickers: "external-embedding/embed-widget-tickers.js", forex_cross_rates: "external-embedding/embed-widget-forex-cross-rates.js", market_quotes: "external-embedding/embed-widget-market-quotes.js", forex_heat_map: "external-embedding/embed-widget-forex-heat-map.js", screener: "external-embedding/embed-widget-screener.js" }, o = { localPrefix: "/static/bundles/", cloudfrontBase: "https://s3.tradingview.com/", widgets: n }, a = function (t, e) { var i = this; void 0 === e && (e = "json"), this.pathname = ("battle" === this._environment() ? "/" : o.localPrefix) + t, this.settingsFormat = e, this._findScripts().forEach(function (t) { return i._replaceScript(t) }) }, s = { embedWidgetSitePath: {}, widgetName: {}, propertiesToWorkWith: {}, utmInfo: {}, iframeSrcBase: {}, propertiesToSkipInHash: {}, propertiesToGetParams: {}, cloudfrontHost: {} }; s.embedWidgetSitePath.get = function () { throw new Error("Method must be overridden") }, s.widgetName.get = function () { throw new Error("Method must be overridden") }, s.propertiesToWorkWith.get = function () { return [] }, s.utmInfo.get = function () { return { utm_source: location.hostname, utm_medium: "widget", utm_campaign: this.widgetName } }, a.prototype._environment = function () { var e = t(); return "local" === e && null === location.host.match(/^localhost(:\d+)?$/) && (e = "battle"), e }, a.prototype.filterRawSettings = function (t) { var e = this.propertiesToSkipInHash.concat(this.propertiesToWorkWith), i = {}; return Object.keys(t).forEach(function (r) { e.includes(r) && (i[r] = t[r]) }), i }, s.iframeSrcBase.get = function () { var t = ""; return "battle" === this._environment() ? t = "https://s.tradingview.com" : "staging" === this._environment() && -1 !== location.hostname.indexOf("beta.tradingview.com") && (t = "https://betacdn.tradingview.com"), this.settings.customer && this.propertiesToSkipInHash.includes("customer") && (t += "/" + this.settings.customer), t + this.embedWidgetSitePath }, s.propertiesToSkipInHash.get = function () { return [] }, s.propertiesToGetParams.get = function () { return ["locale", "whitelabel"] }, s.cloudfrontHost.get = function () { var t = document.createElement("a"); return t.href = o.cloudfrontBase, t.host }, a.prototype._findScripts = function () { var t, e = this, i = document.getElementsByTagName("script"), r = [], n = null; for (t = i.length; t--;) { var o = i[t].src; if (o) { n || (n = document.createElement("a")), n.href = o; var a = ("/" === n.pathname[0] ? "" : "/") + n.pathname, s = n.host === e.cloudfrontHost || "d33t3vvu2t2yu5.cloudfront.net" === n.host; a !== e.pathname || "battle" === e._environment() && !s || r.push(i[t]) } } return r }, a.prototype._replaceScript = function (t) { var e; if (this.script = t, "json" === this.settingsFormat ? e = this._scriptContentToJSON() : "stroke" === this.settingsFormat && (e = t.innerHTML.trim()), e) { if (this.settings = this.filterRawSettings(e), i(this.settings, this.utmInfo), !this._isValidSettings()) return void this._doEmergencyReplacement("Settings is not valid"); var n = isNaN(this.settings.height) ? this.settings.height : this.settings.height + "px", o = isNaN(this.settings.width) ? this.settings.width : this.settings.width + "px"; this.script.parentNode && this.script.parentNode.classList.contains("tradingview-widget-container") ? this.iframeContainer = this.script.parentNode : this.iframeContainer = document.createElement("div"), this.iframeContainer.style.width = o, this.iframeContainer.style.height = n, this.iframeContainer.appendChild(r()); var a = this._extractOldStyleEmbedCopyrightFromDOM(), s = a && !this.settings.whitelabel, c = a || this.iframeContainer.querySelector(".tradingview-widget-copyright"), d = c ? "calc(" + n + " - 32px)" : n; this.iframe = this._createIframe(d, o); var h = this.iframeContainer.querySelector(".tradingview-widget-container__widget"); if (h ? (this.script.parentNode.replaceChild(this.iframe, h), this.script.parentNode.removeChild(this.script)) : (this.iframeContainer.appendChild(this.iframe), this.script.parentNode.replaceChild(this.iframeContainer, this.script)), s) { var l = document.createElement("div"); l.style.height = "32px", l.style.lineHeight = "32px", l.style.width = o, l.style.textAlign = "center", l.style.verticalAlign = "middle", l.innerHTML = a.innerHTML, this.iframeContainer.appendChild(l) } } }, a.prototype._isValidSettings = function () { var t = function (t) { if (void 0 === t) return !0; var e = parseInt(t) + "%" == t + ""; return parseInt(t) + "" == t + "" || e }; return t(this.settings.width) && t(this.settings.height) }, a.prototype._buildGetQueryString = function () { var t = this, e = this.propertiesToGetParams.filter(function (e) { return t.settings[e] }).map(function (e) { return e + "=" + t.settings[e] }).join("&"); return e ? "?" + e : "" }, a.prototype._buildHashString = function () { var t = this, e = {}; return Object.keys(this.settings).forEach(function (i) { -1 === t.propertiesToSkipInHash.indexOf(i) && (e[i] = t.settings[i]) }), Object.keys(e).length > 0 ? "#" + encodeURIComponent(JSON.stringify(e)) : "" }, a.prototype._scriptContentToJSON = function () { var t = this.script.innerHTML.trim(); try { return JSON.parse(t) } catch (t) { return this._doEmergencyReplacement(), console.warn("Embed widget settings parse error: ", t), null } }, a.prototype._createIframe = function (t, e) { var i = document.createElement("iframe"); this.settings.enableScrolling || i.setAttribute("scrolling", "no"), i.setAttribute("allowtransparency", !0), i.setAttribute("frameborder", 0), i.style.boxSizing = "border-box", i.style.height = t, i.style.width = e; var r = this.iframeSrcBase + this._buildGetQueryString() + this._buildHashString(); return i.setAttribute("src", r), i }, a.prototype._doEmergencyReplacement = function (t) { var e = document.createElement("div"); e.innerHTML = t || "Something gone wrong", this.script.parentNode.replaceChild(e, this.script), this._extractOldStyleEmbedCopyrightFromDOM() }, a.prototype._extractOldStyleEmbedCopyrightFromDOM = function () { return e(this.script.parentNode) }, Object.defineProperties(a.prototype, s), new (function (t) { function e() { t.apply(this, arguments) } t && (e.__proto__ = t), e.prototype = Object.create(t && t.prototype), e.prototype.constructor = e; var i = { embedWidgetSitePath: {}, widgetName: {}, propertiesToWorkWith: {}, propertiesToSkipInHash: {}, propertiesToGetParams: {} }; return i.embedWidgetSitePath.get = function () { return "/marketoverviewwidgetembed/" }, i.widgetName.get = function () { return "marketoverview" }, i.propertiesToWorkWith.get = function () { return ["tabs", "customer", "showChart", "largeChartUrl", "gridLineColor", "scaleFontColor", "plotLineColorGrowing", "plotLineColorFalling", "belowLineFillColorGrowing", "belowLineFillColorFalling", "symbolActiveColor", "indexNameBold", "valueBold", "indexNonClickable", "arrowOnValue", "valueTitleMarked", "locale", "width", "height", "whitelabel"] }, e.prototype._createIframeWrap = function () { return t.prototype._createIframeWrap.call(this, this.settings.whitelabel) }, i.propertiesToSkipInHash.get = function () { return ["customer"] }, i.propertiesToGetParams.get = function () { return ["whitelabel"] }, Object.defineProperties(e.prototype, i), e }(a))(o.widgets.marketoverview) }();
